//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CollectionsPlaces = newCollectionsPlacesTable("public", "collections_places", "")

type collectionsPlacesTable struct {
	postgres.Table

	// Columns
	CollectionID postgres.ColumnInteger
	PlaceID      postgres.ColumnString
	CreatedAt    postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CollectionsPlacesTable struct {
	collectionsPlacesTable

	EXCLUDED collectionsPlacesTable
}

// AS creates new CollectionsPlacesTable with assigned alias
func (a CollectionsPlacesTable) AS(alias string) *CollectionsPlacesTable {
	return newCollectionsPlacesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CollectionsPlacesTable with assigned schema name
func (a CollectionsPlacesTable) FromSchema(schemaName string) *CollectionsPlacesTable {
	return newCollectionsPlacesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CollectionsPlacesTable with assigned table prefix
func (a CollectionsPlacesTable) WithPrefix(prefix string) *CollectionsPlacesTable {
	return newCollectionsPlacesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CollectionsPlacesTable with assigned table suffix
func (a CollectionsPlacesTable) WithSuffix(suffix string) *CollectionsPlacesTable {
	return newCollectionsPlacesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCollectionsPlacesTable(schemaName, tableName, alias string) *CollectionsPlacesTable {
	return &CollectionsPlacesTable{
		collectionsPlacesTable: newCollectionsPlacesTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newCollectionsPlacesTableImpl("", "excluded", ""),
	}
}

func newCollectionsPlacesTableImpl(schemaName, tableName, alias string) collectionsPlacesTable {
	var (
		CollectionIDColumn = postgres.IntegerColumn("collection_id")
		PlaceIDColumn      = postgres.StringColumn("place_id")
		CreatedAtColumn    = postgres.TimestampColumn("created_at")
		allColumns         = postgres.ColumnList{CollectionIDColumn, PlaceIDColumn, CreatedAtColumn}
		mutableColumns     = postgres.ColumnList{CreatedAtColumn}
	)

	return collectionsPlacesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		CollectionID: CollectionIDColumn,
		PlaceID:      PlaceIDColumn,
		CreatedAt:    CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
