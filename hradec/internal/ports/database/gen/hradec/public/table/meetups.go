//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Meetups = newMeetupsTable("public", "meetups", "")

type meetupsTable struct {
	postgres.Table

	// Columns
	ID                  postgres.ColumnInteger
	Name                postgres.ColumnString
	Description         postgres.ColumnString
	Date                postgres.ColumnDate
	BeginTime           postgres.ColumnTime
	EndTime             postgres.ColumnTime
	Point               postgres.ColumnString
	Lat                 postgres.ColumnFloat
	Lon                 postgres.ColumnFloat
	Public              postgres.ColumnBool
	MinAge              postgres.ColumnInteger
	MaxAge              postgres.ColumnInteger
	RequireVerification postgres.ColumnBool
	CreatedBy           postgres.ColumnInteger
	Type                postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MeetupsTable struct {
	meetupsTable

	EXCLUDED meetupsTable
}

// AS creates new MeetupsTable with assigned alias
func (a MeetupsTable) AS(alias string) *MeetupsTable {
	return newMeetupsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MeetupsTable with assigned schema name
func (a MeetupsTable) FromSchema(schemaName string) *MeetupsTable {
	return newMeetupsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MeetupsTable with assigned table prefix
func (a MeetupsTable) WithPrefix(prefix string) *MeetupsTable {
	return newMeetupsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MeetupsTable with assigned table suffix
func (a MeetupsTable) WithSuffix(suffix string) *MeetupsTable {
	return newMeetupsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMeetupsTable(schemaName, tableName, alias string) *MeetupsTable {
	return &MeetupsTable{
		meetupsTable: newMeetupsTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newMeetupsTableImpl("", "excluded", ""),
	}
}

func newMeetupsTableImpl(schemaName, tableName, alias string) meetupsTable {
	var (
		IDColumn                  = postgres.IntegerColumn("id")
		NameColumn                = postgres.StringColumn("name")
		DescriptionColumn         = postgres.StringColumn("description")
		DateColumn                = postgres.DateColumn("date")
		BeginTimeColumn           = postgres.TimeColumn("begin_time")
		EndTimeColumn             = postgres.TimeColumn("end_time")
		PointColumn               = postgres.StringColumn("point")
		LatColumn                 = postgres.FloatColumn("lat")
		LonColumn                 = postgres.FloatColumn("lon")
		PublicColumn              = postgres.BoolColumn("public")
		MinAgeColumn              = postgres.IntegerColumn("min_age")
		MaxAgeColumn              = postgres.IntegerColumn("max_age")
		RequireVerificationColumn = postgres.BoolColumn("require_verification")
		CreatedByColumn           = postgres.IntegerColumn("created_by")
		TypeColumn                = postgres.StringColumn("type")
		allColumns                = postgres.ColumnList{IDColumn, NameColumn, DescriptionColumn, DateColumn, BeginTimeColumn, EndTimeColumn, PointColumn, LatColumn, LonColumn, PublicColumn, MinAgeColumn, MaxAgeColumn, RequireVerificationColumn, CreatedByColumn, TypeColumn}
		mutableColumns            = postgres.ColumnList{NameColumn, DescriptionColumn, DateColumn, BeginTimeColumn, EndTimeColumn, PointColumn, LatColumn, LonColumn, PublicColumn, MinAgeColumn, MaxAgeColumn, RequireVerificationColumn, CreatedByColumn, TypeColumn}
	)

	return meetupsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                  IDColumn,
		Name:                NameColumn,
		Description:         DescriptionColumn,
		Date:                DateColumn,
		BeginTime:           BeginTimeColumn,
		EndTime:             EndTimeColumn,
		Point:               PointColumn,
		Lat:                 LatColumn,
		Lon:                 LonColumn,
		Public:              PublicColumn,
		MinAge:              MinAgeColumn,
		MaxAge:              MaxAgeColumn,
		RequireVerification: RequireVerificationColumn,
		CreatedBy:           CreatedByColumn,
		Type:                TypeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
