//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Users = newUsersTable("public", "users", "")

type usersTable struct {
	postgres.Table

	// Columns
	ID                postgres.ColumnInteger
	PasswordHash      postgres.ColumnString
	Username          postgres.ColumnString
	ProfilePictureURL postgres.ColumnString
	DisplayName       postgres.ColumnString
	CreatedAt         postgres.ColumnTimestamp
	UpdatedAt         postgres.ColumnTimestamp
	Email             postgres.ColumnString
	Age               postgres.ColumnInteger
	AgeVerified       postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UsersTable struct {
	usersTable

	EXCLUDED usersTable
}

// AS creates new UsersTable with assigned alias
func (a UsersTable) AS(alias string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersTable with assigned schema name
func (a UsersTable) FromSchema(schemaName string) *UsersTable {
	return newUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersTable with assigned table prefix
func (a UsersTable) WithPrefix(prefix string) *UsersTable {
	return newUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersTable with assigned table suffix
func (a UsersTable) WithSuffix(suffix string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersTable(schemaName, tableName, alias string) *UsersTable {
	return &UsersTable{
		usersTable: newUsersTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newUsersTableImpl("", "excluded", ""),
	}
}

func newUsersTableImpl(schemaName, tableName, alias string) usersTable {
	var (
		IDColumn                = postgres.IntegerColumn("id")
		PasswordHashColumn      = postgres.StringColumn("password_hash")
		UsernameColumn          = postgres.StringColumn("username")
		ProfilePictureURLColumn = postgres.StringColumn("profile_picture_url")
		DisplayNameColumn       = postgres.StringColumn("display_name")
		CreatedAtColumn         = postgres.TimestampColumn("created_at")
		UpdatedAtColumn         = postgres.TimestampColumn("updated_at")
		EmailColumn             = postgres.StringColumn("email")
		AgeColumn               = postgres.IntegerColumn("age")
		AgeVerifiedColumn       = postgres.BoolColumn("age_verified")
		allColumns              = postgres.ColumnList{IDColumn, PasswordHashColumn, UsernameColumn, ProfilePictureURLColumn, DisplayNameColumn, CreatedAtColumn, UpdatedAtColumn, EmailColumn, AgeColumn, AgeVerifiedColumn}
		mutableColumns          = postgres.ColumnList{PasswordHashColumn, UsernameColumn, ProfilePictureURLColumn, DisplayNameColumn, CreatedAtColumn, UpdatedAtColumn, EmailColumn, AgeColumn, AgeVerifiedColumn}
	)

	return usersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		PasswordHash:      PasswordHashColumn,
		Username:          UsernameColumn,
		ProfilePictureURL: ProfilePictureURLColumn,
		DisplayName:       DisplayNameColumn,
		CreatedAt:         CreatedAtColumn,
		UpdatedAt:         UpdatedAtColumn,
		Email:             EmailColumn,
		Age:               AgeColumn,
		AgeVerified:       AgeVerifiedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
